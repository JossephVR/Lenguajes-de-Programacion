#Ejercicio 1:
subCadena(Sub, Lista, Filtradas) :-
    include(subCadena2(Sub), Lista, Filtradas).
subCadena2(Sub, Cadena) :-
    sub_atom(Cadena, _, _, _, Sub).



#Ejercicio 2:
sub_conjunto([], _).
sub_conjunto([X|Xs], Ys) :-
    member(X, Ys),
    sub_conjunto(Xs, Ys).


#Ejercicio 3:
aplanar([], []).
aplanar([X|Xs], L) :- 
    is_list(X),
    aplanar(X, Y),
    aplanar(Xs, Z),
    append(Y, Z, L).
aplanar([X|Xs], [X|Z]) :-
    \+ is_list(X),
    aplanar(Xs, Z).



#Ejercicio 4:

Conocimiento:

conectado(i,2).
conectado(2,3).
conectado(2,8).
conectado(8,9).
conectado(9,3).
conectado(3,4).
conectado(4,10).
conectado(10,16).
conectado(16,22).
conectado(22,21).
conectado(21,15).
conectado(15,14).
conectado(14,13).
conectado(13,7).
conectado(7,1).
conectado(14,20).
conectado(20,26).
conectado(22,28).
conectado(26,27).
conectado(27,28).
conectado(28,29).
conectado(29,23).
conectado(23,17).
conectado(17,11).
conectado(11,5).
conectado(5,6).
conectado(28,34).
conectado(34,35).
conectado(35,36).
conectado(36,30).
conectado(30,24).
conectado(24,18).
conectado(18,12).
conectado(32,31).
conectado(31,25).
conectado(25,19).
conectado(34,33).
conectado(33,32).
conectado(32,f).
conectado(12,18).
conectado(18,24).
conectado(24,30).
conectado(30,36).
conectado(36,35).
conectado(35,34).

Funci√≥n: 

ruta(Fin,Fin,LRuta,Res):-
    reverse([Fin|LRuta],Res). 
ruta(Ini,Fin,LRuta,Res):-
    conectado(Ini,Z),
    not(member(Z,LRuta)),
    ruta(Z,Fin,[Ini|LRuta],Res).
